#version 130

varying vec3 FragPos;
varying vec3 Normal;
varying vec2 TexCoords;
varying vec3 Ambiant_Occlusion;

varying vec3 fragmentColor;
out vec4 color;

varying vec3 viewPos;
uniform float shininess;
uniform vec3 ambientLightForce;
uniform vec3 lightA_diffuse;
uniform vec3 lightA_direction;
uniform vec3 lightA_specular;
uniform sampler2D tex;

void main()
{

    // Diffuse
    vec3 norm = Normal;

    vec3 lightDirA = normalize(-lightA_direction - FragPos);
    float diffA = max(dot(norm, lightDirA), 0.0);
    vec3 diffuseA = lightA_diffuse * diffA;

    //vec3 lightDirB = normalize(-lightB.direction - FragPos);
    //float diffB = max(dot(norm, lightDirB), 0.0);
    //vec3 diffuseB = lightB.diffuse * diffB;

	// Specular
    vec3 viewDir = normalize(viewPos - FragPos);

    vec3 reflectDirA = reflect(-lightDirA, norm);
    //float spec = pow(max(dot(viewDir, reflectDirA), 0.0), shininess);
    //vec3 specular = lightA_specular * spec * length(fragmentColor);     //watch out here texture is not used!

    vec4 colors = vec4(fragmentColor, 1)  * texture(tex, TexCoords);
    vec3 light_3 = (diffuseA + (Ambiant_Occlusion * ambientLightForce));
    vec4 light = vec4(light_3, 1.0f);
    color = clamp(light * colors, 0.0, 1.0);
}