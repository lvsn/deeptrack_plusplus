#version 130

struct Material {
    float     shininess;
};

struct Light {
    vec3 direction;
    vec3 diffuse;
    vec3 specular;
};

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;
in vec3 Ambiant_Occlusion;

in vec3 fragmentColor;
out vec4 color;

in vec3 viewPos;
uniform Material material;
uniform vec3 ambientLightForce;
uniform Light lightA;
uniform Light lightB;
uniform sampler2D tex;

void main()
{

    // Diffuse
    vec3 norm = Normal;

    vec3 lightDirA = normalize(-lightA.direction - FragPos);
    float diffA = max(dot(norm, lightDirA), 0.0);
    vec3 diffuseA = lightA.diffuse * diffA;

    vec3 lightDirB = normalize(-lightB.direction - FragPos);
    float diffB = max(dot(norm, lightDirB), 0.0);
    vec3 diffuseB = lightB.diffuse * diffB;

	// Specular
    vec3 viewDir = normalize(viewPos - FragPos);

    vec3 reflectDirA = reflect(-lightDirA, norm);
    float spec = pow(max(dot(viewDir, reflectDirA), 0.0), material.shininess);
    vec3 specular = lightA.specular * spec * length(fragmentColor);     //watch out here texture is not used!

    vec4 colors = vec4(fragmentColor, 1) * texture(tex, TexCoords);
    vec3 light_3 = (diffuseA + diffuseB + (Ambiant_Occlusion * ambientLightForce));
    vec4 light = vec4(light_3, 1.0f);
    color = clamp(light * colors, 0.0, 1.0);
}