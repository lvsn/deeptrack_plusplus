#version 130

varying vec3 FragPos;
varying vec3 Normal;
varying vec2 TexCoords;
varying vec3 Ambiant_Occlusion;

varying vec3 fragmentColor;
out vec4 color;

varying vec3 viewPos;
uniform float shininess;
uniform vec3 ambientLightForce;
uniform vec3 lightA_diffuse;
uniform vec3 lightA_direction;
uniform vec3 lightA_specular;
uniform sampler2D tex;

void main()
{

    // Diffuse
    vec3 normal = normalize(Normal);

    vec3 lightDirA = normalize(lightA_direction - FragPos);
    float lambertianA = max(dot(lightDirA, normal), 0.0);
    vec3 diffuseA = lightA_diffuse * lambertianA;
    float specular = 0.0;
    if (lambertianA > 0.0 && shininess > 0.0) {
        vec3 viewDir = normalize(-FragPos);

        // blinn phong
        vec3 halfDir = normalize(lightDirA + viewDir);
        float specAngle = max(dot(halfDir, normal), 0.0);
        specular = pow(specAngle, shininess);
    }


    vec4 colors = vec4(fragmentColor, 1)  * texture(tex, TexCoords);
    vec3 light_3 = (diffuseA + (Ambiant_Occlusion * ambientLightForce));
    vec4 light = vec4(light_3, 1.0f);
    color = clamp(light * colors + specular, 0.0, 1.0);
}